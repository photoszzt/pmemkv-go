// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Sat, 27 Apr 2019 00:52:13 CDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package pmemkv_sys

/*
#cgo LDFLAGS: -lpmemkv -ltbb
#include "libpmemkv.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// kvengine_start function as declared in pmemkv-go/libpmemkv.h:137
func kvengine_start(context unsafe.Pointer, engine string, config string, callback KVStartFailureCallback) *KVEngineSys {
	ccontext, _ := context, cgoAllocsUnknown
	cengine, _ := unpackPCharString(engine)
	cconfig, _ := unpackPCharString(config)
	ccallback, _ := callback.PassRef()
	__ret := C.kvengine_start(ccontext, cengine, cconfig, ccallback)
	__v := *(**KVEngineSys)(unsafe.Pointer(&__ret))
	return __v
}

// kvengine_stop function as declared in pmemkv-go/libpmemkv.h:138
func kvengine_stop(kv *KVEngineSys) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	C.kvengine_stop(ckv)
}

// kvengine_all function as declared in pmemkv-go/libpmemkv.h:140
func kvengine_all(kv *KVEngineSys, context unsafe.Pointer, c KVAllCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	cc, _ := c.PassRef()
	C.kvengine_all(ckv, ccontext, cc)
}

// kvengine_all_above function as declared in pmemkv-go/libpmemkv.h:141
func kvengine_all_above(kv *KVEngineSys, context unsafe.Pointer, kb int32, k string, c KVAllCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cc, _ := c.PassRef()
	C.kvengine_all_above(ckv, ccontext, ckb, ck, cc)
}

// kvengine_all_below function as declared in pmemkv-go/libpmemkv.h:142
func kvengine_all_below(kv *KVEngineSys, context unsafe.Pointer, kb int32, k string, c KVAllCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cc, _ := c.PassRef()
	C.kvengine_all_below(ckv, ccontext, ckb, ck, cc)
}

// kvengine_all_between function as declared in pmemkv-go/libpmemkv.h:143
func kvengine_all_between(kv *KVEngineSys, context unsafe.Pointer, kb1 int32, k1 string, kb2 int32, k2 string, c KVAllCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb1, _ := (C.int32_t)(kb1), cgoAllocsUnknown
	ck1, _ := unpackPCharString(k1)
	ckb2, _ := (C.int32_t)(kb2), cgoAllocsUnknown
	ck2, _ := unpackPCharString(k2)
	cc, _ := c.PassRef()
	C.kvengine_all_between(ckv, ccontext, ckb1, ck1, ckb2, ck2, cc)
}

// kvengine_count function as declared in pmemkv-go/libpmemkv.h:146
func kvengine_count(kv *KVEngineSys) int {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	__ret := C.kvengine_count(ckv)
	__v := (int)(__ret)
	return __v
}

// kvengine_count_above function as declared in pmemkv-go/libpmemkv.h:147
func kvengine_count_above(kv *KVEngineSys, kb int32, k string) int {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	__ret := C.kvengine_count_above(ckv, ckb, ck)
	__v := (int)(__ret)
	return __v
}

// kvengine_count_below function as declared in pmemkv-go/libpmemkv.h:148
func kvengine_count_below(kv *KVEngineSys, kb int32, k string) int {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	__ret := C.kvengine_count_below(ckv, ckb, ck)
	__v := (int)(__ret)
	return __v
}

// kvengine_count_between function as declared in pmemkv-go/libpmemkv.h:149
func kvengine_count_between(kv *KVEngineSys, kb1 int32, k1 string, kb2 int32, k2 string) int {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb1, _ := (C.int32_t)(kb1), cgoAllocsUnknown
	ck1, _ := unpackPCharString(k1)
	ckb2, _ := (C.int32_t)(kb2), cgoAllocsUnknown
	ck2, _ := unpackPCharString(k2)
	__ret := C.kvengine_count_between(ckv, ckb1, ck1, ckb2, ck2)
	__v := (int)(__ret)
	return __v
}

// kvengine_each function as declared in pmemkv-go/libpmemkv.h:151
func kvengine_each(kv *KVEngineSys, context unsafe.Pointer, c KVEachCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	cc, _ := c.PassRef()
	C.kvengine_each(ckv, ccontext, cc)
}

// kvengine_each_above function as declared in pmemkv-go/libpmemkv.h:152
func kvengine_each_above(kv *KVEngineSys, context unsafe.Pointer, kb int32, k string, c KVEachCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cc, _ := c.PassRef()
	C.kvengine_each_above(ckv, ccontext, ckb, ck, cc)
}

// kvengine_each_below function as declared in pmemkv-go/libpmemkv.h:153
func kvengine_each_below(kv *KVEngineSys, context unsafe.Pointer, kb int32, k string, c KVEachCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cc, _ := c.PassRef()
	C.kvengine_each_below(ckv, ccontext, ckb, ck, cc)
}

// kvengine_each_between function as declared in pmemkv-go/libpmemkv.h:154
func kvengine_each_between(kv *KVEngineSys, context unsafe.Pointer, kb1 int32, k1 string, kb2 int32, k2 string, c KVEachCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb1, _ := (C.int32_t)(kb1), cgoAllocsUnknown
	ck1, _ := unpackPCharString(k1)
	ckb2, _ := (C.int32_t)(kb2), cgoAllocsUnknown
	ck2, _ := unpackPCharString(k2)
	cc, _ := c.PassRef()
	C.kvengine_each_between(ckv, ccontext, ckb1, ck1, ckb2, ck2, cc)
}

// kvengine_exists function as declared in pmemkv-go/libpmemkv.h:157
func kvengine_exists(kv *KVEngineSys, kb int32, k string) byte {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	__ret := C.kvengine_exists(ckv, ckb, ck)
	__v := (byte)(__ret)
	return __v
}

// kvengine_get function as declared in pmemkv-go/libpmemkv.h:158
func kvengine_get(kv *KVEngineSys, context unsafe.Pointer, kb int32, k string, c KVGetCallback) {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ccontext, _ := context, cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cc, _ := c.PassRef()
	C.kvengine_get(ckv, ccontext, ckb, ck, cc)
}

// kvengine_get_copy function as declared in pmemkv-go/libpmemkv.h:159
func kvengine_get_copy(kv *KVEngineSys, kb int32, k string, maxvaluebytes int32, value []byte) byte {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cmaxvaluebytes, _ := (C.int32_t)(maxvaluebytes), cgoAllocsUnknown
	cvalue, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&value)).Data)), cgoAllocsUnknown
	__ret := C.kvengine_get_copy(ckv, ckb, ck, cmaxvaluebytes, cvalue)
	__v := (byte)(__ret)
	return __v
}

// kvengine_put function as declared in pmemkv-go/libpmemkv.h:160
func kvengine_put(kv *KVEngineSys, kb int32, k string, vb int32, v string) byte {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	cvb, _ := (C.int32_t)(vb), cgoAllocsUnknown
	cv, _ := unpackPCharString(v)
	__ret := C.kvengine_put(ckv, ckb, ck, cvb, cv)
	__v := (byte)(__ret)
	return __v
}

// kvengine_remove function as declared in pmemkv-go/libpmemkv.h:161
func kvengine_remove(kv *KVEngineSys, kb int32, k string) byte {
	ckv, _ := (*C.KVEngine)(unsafe.Pointer(kv)), cgoAllocsUnknown
	ckb, _ := (C.int32_t)(kb), cgoAllocsUnknown
	ck, _ := unpackPCharString(k)
	__ret := C.kvengine_remove(ckv, ckb, ck)
	__v := (byte)(__ret)
	return __v
}
